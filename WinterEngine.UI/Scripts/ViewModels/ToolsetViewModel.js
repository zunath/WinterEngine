// <autogenerated>
//   This file was generated by T4 code generator ViewModelGenerator.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


var ToolsetViewModel = function()
{
	var self = this;

	//	Type of the original .NET model. Must stay first ! (required for JSON.NET)
	self.$type = 'WinterEngine.DataTransferObjects.ViewModels.ToolsetViewModel, WinterEngine.DataTransferObjects';

	self.CurrentObjectMode = ko.observable();
	self.CurrentObjectTreeSelector = ko.observable();
	self.CurrentObjectTabSelector = ko.observable();
	self.ActiveArea = ko.observable();
	self.ActiveCreature = ko.observable();
	self.ActiveItem = ko.observable();
	self.ActivePlaceable = ko.observable();
	self.ActiveConversation = ko.observable();
	self.ActiveScript = ko.observable();
	self.ActiveTileset = ko.observable();
	self.ActiveTile = ko.observable();
	self.ModuleList = ko.observableArray();
	self.AvailableContentPackages = ko.observableArray();
	self.AttachedContentPackages = ko.observableArray();
	self.TilesetSpriteSheetsList = ko.observableArray();
	self.SelectedTilesetSpriteSheetID = ko.observable();

	//	invoke the extendable's init() function. Must happen when all observables are created (in case a
    //	computable wants to make use of it)
    this.init();

    self.setModel = function(objFromServer) {
	  if (!objFromServer) return;

	  self.CurrentObjectMode(objFromServer.CurrentObjectMode);
	  self.CurrentObjectTreeSelector(objFromServer.CurrentObjectTreeSelector);
	  self.CurrentObjectTabSelector(objFromServer.CurrentObjectTabSelector);
	  if (objFromServer.ActiveArea) {
        var __ActiveArea = new Area();
	    __ActiveArea.setModel(objFromServer.ActiveArea);
	    self.ActiveArea(__ActiveArea);
	  }
	  else
		self.ActiveArea(null);
	  if (objFromServer.ActiveCreature) {
        var __ActiveCreature = new Creature();
	    __ActiveCreature.setModel(objFromServer.ActiveCreature);
	    self.ActiveCreature(__ActiveCreature);
	  }
	  else
		self.ActiveCreature(null);
	  if (objFromServer.ActiveItem) {
        var __ActiveItem = new Item();
	    __ActiveItem.setModel(objFromServer.ActiveItem);
	    self.ActiveItem(__ActiveItem);
	  }
	  else
		self.ActiveItem(null);
	  if (objFromServer.ActivePlaceable) {
        var __ActivePlaceable = new Placeable();
	    __ActivePlaceable.setModel(objFromServer.ActivePlaceable);
	    self.ActivePlaceable(__ActivePlaceable);
	  }
	  else
		self.ActivePlaceable(null);
	  if (objFromServer.ActiveConversation) {
        var __ActiveConversation = new Conversation();
	    __ActiveConversation.setModel(objFromServer.ActiveConversation);
	    self.ActiveConversation(__ActiveConversation);
	  }
	  else
		self.ActiveConversation(null);
	  if (objFromServer.ActiveScript) {
        var __ActiveScript = new Script();
	    __ActiveScript.setModel(objFromServer.ActiveScript);
	    self.ActiveScript(__ActiveScript);
	  }
	  else
		self.ActiveScript(null);
	  if (objFromServer.ActiveTileset) {
        var __ActiveTileset = new Tileset();
	    __ActiveTileset.setModel(objFromServer.ActiveTileset);
	    self.ActiveTileset(__ActiveTileset);
	  }
	  else
		self.ActiveTileset(null);
	  if (objFromServer.ActiveTile) {
        var __ActiveTile = new Tile();
	    __ActiveTile.setModel(objFromServer.ActiveTile);
	    self.ActiveTile(__ActiveTile);
	  }
	  else
		self.ActiveTile(null);
	  self.ModuleList.removeAll();	// clear array first
	  if (objFromServer.ModuleList && objFromServer.ModuleList.length > 0)
	  {
		  for (var i=0; i < objFromServer.ModuleList.length; i++) {
			  var _iter_item = objFromServer.ModuleList[i];
			  				  var _new_item = new GameModule();
				  _new_item.setModel(_iter_item);
				  self.ModuleList.push(_new_item);
			  		  }
	  }
	  self.AvailableContentPackages.removeAll();	// clear array first
	  if (objFromServer.AvailableContentPackages && objFromServer.AvailableContentPackages.length > 0)
	  {
		  for (var i=0; i < objFromServer.AvailableContentPackages.length; i++) {
			  var _iter_item = objFromServer.AvailableContentPackages[i];
			  				  var _new_item = new ContentPackage();
				  _new_item.setModel(_iter_item);
				  self.AvailableContentPackages.push(_new_item);
			  		  }
	  }
	  self.AttachedContentPackages.removeAll();	// clear array first
	  if (objFromServer.AttachedContentPackages && objFromServer.AttachedContentPackages.length > 0)
	  {
		  for (var i=0; i < objFromServer.AttachedContentPackages.length; i++) {
			  var _iter_item = objFromServer.AttachedContentPackages[i];
			  				  var _new_item = new ContentPackage();
				  _new_item.setModel(_iter_item);
				  self.AttachedContentPackages.push(_new_item);
			  		  }
	  }
	  self.TilesetSpriteSheetsList.removeAll();	// clear array first
	  if (objFromServer.TilesetSpriteSheetsList && objFromServer.TilesetSpriteSheetsList.length > 0)
	  {
		  for (var i=0; i < objFromServer.TilesetSpriteSheetsList.length; i++) {
			  var _iter_item = objFromServer.TilesetSpriteSheetsList[i];
			  				  var _new_item = new ContentPackageResource();
				  _new_item.setModel(_iter_item);
				  self.TilesetSpriteSheetsList.push(_new_item);
			  		  }
	  }
	  self.SelectedTilesetSpriteSheetID(objFromServer.SelectedTilesetSpriteSheetID);
	  
	  //	check if change tracking is active for this viewmodel. If it is: reset isDirty flag
	  if (self.isDirty)
		  self.isDirty(false);
    }
}

//	inherit from extendable (will allow adding observables/computables on client-side)
ToolsetViewModel.prototype = new extendable();

