// <autogenerated>
//   This file was generated by T4 code generator ViewModelGenerator.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


var Script = function()
{
	var self = this;

	//	Type of the original .NET model. Must stay first ! (required for JSON.NET)
	self.$type = 'WinterEngine.DataTransferObjects.Script, WinterEngine.DataTransferObjects';

	self.Description = ko.observable();
	self.Tag = ko.observable();
	self.Resref = ko.observable();
	self.GameObjectTypeID = ko.observable();
	self.GameObjectType = ko.observable();
	self.ResourceCategoryID = ko.observable();
	self.ResourceCategory = ko.observable();
	self.TemporaryDisplayName = ko.observable();
	self.GraphicResource = ko.observable();
	self.GraphicResourceID = ko.observable();
	self.LocalVariables = ko.observableArray();
	self.ResourceID = ko.observable();
	self.Name = ko.observable();
	self.ResourceTypeID = ko.observable();
	self.ResourceType = ko.observable();
	self.Comment = ko.observable();
	self.IsSystemResource = ko.observable();
	self.CreateDate = ko.observable();

	//	invoke the extendable's init() function. Must happen when all observables are created (in case a
    //	computable wants to make use of it)
    this.init();

    self.setModel = function(objFromServer) {
	  if (!objFromServer) return;

	  self.Description(objFromServer.Description);
	  self.Tag(objFromServer.Tag);
	  self.Resref(objFromServer.Resref);
	  self.GameObjectTypeID(objFromServer.GameObjectTypeID);
	  if (objFromServer.GameObjectType) {
        var __GameObjectType = new GameObjectTypeEnum();
	    __GameObjectType.setModel(objFromServer.GameObjectType);
	    self.GameObjectType(__GameObjectType);
	  }
	  else
		self.GameObjectType(null);
	  self.ResourceCategoryID(objFromServer.ResourceCategoryID);
	  if (objFromServer.ResourceCategory) {
        var __ResourceCategory = new Category();
	    __ResourceCategory.setModel(objFromServer.ResourceCategory);
	    self.ResourceCategory(__ResourceCategory);
	  }
	  else
		self.ResourceCategory(null);
	  self.TemporaryDisplayName(objFromServer.TemporaryDisplayName);
	  if (objFromServer.GraphicResource) {
        var __GraphicResource = new ContentPackageResource();
	    __GraphicResource.setModel(objFromServer.GraphicResource);
	    self.GraphicResource(__GraphicResource);
	  }
	  else
		self.GraphicResource(null);
	  self.GraphicResourceID(objFromServer.GraphicResourceID);
	  self.LocalVariables.removeAll();	// clear array first
	  if (objFromServer.LocalVariables && objFromServer.LocalVariables.length > 0)
	  {
		  for (var i=0; i < objFromServer.LocalVariables.length; i++) {
			  var _iter_item = objFromServer.LocalVariables[i];
			  				  var _new_item = new LocalVariable();
				  _new_item.setModel(_iter_item);
				  self.LocalVariables.push(_new_item);
			  		  }
	  }
	  self.ResourceID(objFromServer.ResourceID);
	  self.Name(objFromServer.Name);
	  self.ResourceTypeID(objFromServer.ResourceTypeID);
	  if (objFromServer.ResourceType) {
        var __ResourceType = new ResourceTypeEnum();
	    __ResourceType.setModel(objFromServer.ResourceType);
	    self.ResourceType(__ResourceType);
	  }
	  else
		self.ResourceType(null);
	  self.Comment(objFromServer.Comment);
	  self.IsSystemResource(objFromServer.IsSystemResource);
	  if (objFromServer.CreateDate)
		self.CreateDate(moment(objFromServer.CreateDate).toDate());
	  else
	    self.CreateDate(null);
	  
	  //	check if change tracking is active for this viewmodel. If it is: reset isDirty flag
	  if (self.isDirty)
		  self.isDirty(false);
    }
}

//	inherit from extendable (will allow adding observables/computables on client-side)
Script.prototype = new extendable();

