// <autogenerated>
//   This file was generated by T4 code generator ViewModelGenerator.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


var JSTreeNode = function()
{
	var self = this;

	//	Type of the original .NET model. Must stay first ! (required for JSON.NET)
	self.$type = 'WinterEngine.DataTransferObjects.BusinessObjects.JSTreeNode, WinterEngine.DataTransferObjects';

	self.data = ko.observable();
	self.children = ko.observableArray();
	self.attr = ko.observableArray();

	//	invoke the extendable's init() function. Must happen when all observables are created (in case a
    //	computable wants to make use of it)
    this.init();

    self.setModel = function(objFromServer) {
	  if (!objFromServer) return;

	  self.data(objFromServer.data);
	  self.children.removeAll();	// clear array first
	  if (objFromServer.children && objFromServer.children.length > 0)
	  {
		  for (var i=0; i < objFromServer.children.length; i++) {
			  var _iter_item = objFromServer.children[i];
			  				  var _new_item = new JSTreeNode();
				  _new_item.setModel(_iter_item);
				  self.children.push(_new_item);
			  		  }
	  }
	  self.attr.removeAll();	// clear array first
	  if (objFromServer.attr && objFromServer.attr.length > 0)
	  {
		  for (var i=0; i < objFromServer.attr.length; i++) {
			  var _iter_item = objFromServer.attr[i];
			  				  self.attr.push(_iter_item);
			  		  }
	  }
	  
	  //	check if change tracking is active for this viewmodel. If it is: reset isDirty flag
	  if (self.isDirty)
		  self.isDirty(false);
    }
}

//	inherit from extendable (will allow adding observables/computables on client-side)
JSTreeNode.prototype = new extendable();

